{
  "ReactPublish": "On April 25th, the React team officially announced the release of React 19 on NPM. Developers can now download and start using it.",
  "tryIt": "Coincidentally, this blog is also built using Next.js, so we can take this opportunity to try out the changes introduced in React 19.",
  "Prepare": "Prepare",
  "Advice": "The official recommendation is to first install the stable version of React 18.3 to identify any potential hidden issues before upgrading to version 19.",
  "checkOver": "After verifying that everything is correct, you can proceed to install React 19 (currently in BETA) and start using the new APIs.",
  "Guide": "Upgrade Guide for React v19",
  "difference": "Difference",
  "rollout": "After a long period of silence, React has taken community feedback into account, addressing many pain points and optimizing the framework. The highly anticipated React 19 has been released.",
  "majorchanges": "Major changes include the following:",
  "change1": "React Compiler: Assists developers in automatically optimizing pages, reducing the need for, or even eliminating, useMemo and useCallback.",
  "new": "new",
  "change2": "Tags and corresponding Hooks for form operations.",
  "change3": "New operation hooks such as",
  "andsoon": "and more",
  "change4": "You can now write Meta data directly within a single component.",
  "change5": "React code now allows us to merge Web components.",
  "compiler": "The React Compiler can be said to be the most exciting feature in version 19. It is a new compiler designed to help developers optimize React code.",
  "simple": "For example, the series of optimization hooks such as useMemo and useCallback were previously cumbersome to use and could even lead to negative optimization. React has introduced the Compiler to automatically handle the code, avoiding the phenomenon of negative optimization.",
  "easily": "In simple terms, the Compiler caches every element and function in the component, and only re-caches them when changes occur. Otherwise, it continues to use the cached values.",
  "eaasy1": "This article focuses on usage rather than principles. For more details, please refer to this article:",
  "eassay1title": "I've Got React Compiler Down Pat",
  "check": "To enable React Compiler, we first need to perform a check on our project.",
  "shell": "This script is mainly used to check: 1. How many components in the project can be successfully optimized: the more, the better. 2. Whether strict mode is used, as using it increases the success rate of optimization. 3. Whether third-party libraries incompatible with the Compiler are used.",
  "result": "The results of this framework check are as follows:",
  "ways": "Different frameworks have different methods for using the Compiler. To enable the Compiler in Next.js, you need to first download the Next-canary version and babel-plugin-react-compiler.",
  "then": "then in ",
  "start": "you can start the compiler to optimize the project.",
  "end": "After successful optimization, you will see Memo stars in React-dev-tool.",
  "problems": "It is worth mentioning that the Compiler is still in testing and has many issues, such as conflicts with i18n client components, so it is still under observation.",
  "hooks": "React 19 introduces many new Hooks, including",
  "foraction": ", most of which are designed for Action, i.e.",
  "foraction2": "tags.",
  "use1": "Since I didn't use forms, I started with other new features first,like ",
  "use2": "Use to retrieve resource values, such as Promises or Context. Unlike other hooks, it can be used within if statements.",
  "principle": "Its specific principles are as follows (taken from the official documentation):",
  "mainpri": "When a Promise is called using the use API, it integrates with and Suspense error boundaries. When the Promise passed to use is in a pending state, the component calling use will suspend. If the component calling use is wrapped in a Suspense boundary, a fallback will be displayed. After resolving the Promise, the Suspense fallback will be replaced by the component rendering the data returned by the use API. If the Promise passed to use is rejected, the fallback of the nearest error boundary will be displayed.",
  "basicUsage": "Basic usage is as follows:",
  "notice": "It is worth noting that:",
  "inHook": "use must be called in a Component or Hook.",
  "inService": "It is preferable to create Promises in server components and pass them to client components, rather than creating Promises in client components. Promises created in client components are recreated each time they are rendered. Promises passed from server components to client components are stable when re-rendered.",
  "principle2": "Like useContext, use(context) always looks for the nearest context provider above the component calling it. It searches upwards and does not consider the context provider in the component from which use(context) is called.",
  "principle3": "When passing a Promise from a server component to a client component, its resolved value must be serializable in order to be passed between the server and client. Data types such as functions that cannot be serialized cannot be the resolved value of such a Promise.",
  "usage2": "Usage in this project is as follows:",
  "principle4": "Wrap the target component with ErrorBoundary and Suspense to provide corresponding UI during resolution and after resolution failure. Then pass the wordsFetch function from the server and resolve it using use.",
  "final": "The final effect can be seen on the blog homepage (code is stored on GitHub).",
  "other": "Other",
  "more": "React 19's updates go far beyond this. I have only used these two methods so far.",
  "otherway": "There are still many hooks related to optimistic updates, form operations, and more that I have yet to use.",
  "badref": "The much-criticized Ref forwarding has also been optimized.",
  "moremore": "Error messages are now more user-friendly, and more.",
  "forProduction": "I will gradually start using React 19 in production in the future.",
  "blog": "React 19 Official Blog",
  "aboutUse": "About USE",
  "aboutCompiler": "About Compiler"
}
