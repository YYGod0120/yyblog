{
  "0": "preface",
  "1": "During this period of time working on the AI-QA platform, I encountered a business requirement for GPT like post streaming response: by sending post issues to the backend, the backend adopts streaming response, which means returning data in segments and then rendering the style. I encountered a problem here, Axios cannot respond to post streaming.",
  "2": "On the contrary, native fetch can achieve post streaming processing.",
  "3": "So I went to check the relevant information and found that",
  "4": "It seems that some places are really inferior",
  "5": "XHR(XMLHttpRequests)",
  "6": "It is based on",
  "7": "The network request library uses the built-in HTTP module of Node.js on the node side and XMLHttpRequests on the browser side. Its functions include but are not limited to intercepting requests and responses, automatically converting JSON data, and canceling requests.",
  "8": "More content can be viewed directly",
  "9": "Official website",
  "10": ".",
  "11": "What is the main topic here",
  "12": "XHR(XMLHttpRequests)",
  "13": ":",
  "14": "XHR is an early browser built-in object that, although named XML, can not only manipulate data in XML format, but also other data such as images, documents, and so on. But with the emergence of the updated fetch, XHR gradually disappeared, and the only reason it remained is probably to be compatible with old browsers, adapt to old scripts, and track upload progress (which fetch cannot do).",
  "15": "Fundamentals of XMLHttpRequests",
  "16": "XMLHttpRequest has two execution modes: synchronous and asynchronous",
  "17": "Let's first take a look at the most commonly used asynchronous:",
  "18": "1. Create",
  "19": "2. Initialize it",
  "20": "Method - HTTP method. Usually it is \"GET\" or \"POST\".",
  "21": "URL - The URL to be requested, usually a string or a URL object.",
  "22": "Asynchronous - If explicitly set to false, the request will be processed synchronously, which we will discuss later.",
  "23": "User, password - The login name and password for HTTP basic authentication (if required).",
  "24": "3. Send a request",
  "25": "4. Monitor XHR events to obtain responses",
  "26": "Load - When the request is completed (even if the HTTP status is 400 or 500, etc.) and the response has been fully downloaded.",
  "27": "Error - When a request cannot be made, such as a network interruption or an invalid URL.",
  "28": "Progress - Regularly triggered during the download response period, reporting how much has been downloaded.",
  "29": "Typical code for XHR Get request (probably not needed now):",
  "30": "Upload Progress",
  "31": "As mentioned earlier, XML can track upload progress in a way that Fetch cannot - xhr.upload",
  "32": "It generates events, similar to XHR, but XHR. upload only triggers them when uploading:",
  "33": "Loadstart - Upload begins.",
  "34": "Progress - Regularly triggered during upload period.",
  "35": "Abort - Upload aborted.",
  "36": "Error - Non HTTP error.",
  "37": "Load - Upload successfully completed.",
  "38": "Timeout - upload timeout (if timeout property is set).",
  "39": "Loadend - Upload completed, regardless of success or error.",
  "40": "Example:",
  "41": "Fetch",
  "42": "Fetch is a modern and universal JS network request method",
  "43": "Its advantages lie in:",
  "44": "Support asynchronous/await",
  "45": "Easy to write and user-friendly API",
  "46": "Detached from XHR, it is an implementation method in the ES specification",
  "47": "But it still has its drawbacks:",
  "48": "Browser not supported, polyfill required",
  "49": "Default no cookies",
  "50": "HTTP errors will not cause Promise to return reject",
  "51": "Not supporting viewing upload progress",
  "52": "Do not support timeout control",
  "53": "Next, let's take a look at the relevant process of Fetch",
  "54": "Fetch Fundamentals",
  "55": "Basic grammar:",
  "56": "The browser immediately initiates the request and returns a promise that the calling code should be used to obtain the result. Obtaining a response usually requires two stages.",
  "57": "In the first stage, when the server sends a response header, the promise returned by fetch uses the built-in Response class object to parse the response header.",
  "58": "At this stage, we can confirm whether the request is successful by checking the status of the response header. If the fetch cannot be successfully established, that is, if there are network problems or other network issues, the promise will be rejected.",
  "59": "Therefore, all server returns such as 404 or 500 will not cause Promise to return reject, making it difficult to track errors.",
  "60": "In the second stage, in order to obtain the response body, we need to call another method.",
  "61": "Response provides multiple promise based methods to access the body in different formats:",
  "62": "Response. text() - Read the response and return it in text format,",
  "63": "Response. json () - parses the response into JSON format,",
  "64": "Response. formData() - returns a response in the form of a FormData object (explained in the next chapter),",
  "65": "Response. blob() - returns a response in the form of a Blob (binary data with a type),",
  "66": "Response. arrayBuffer() - returns the response in the form of an ArrayBuffer (low-level binary data),",
  "67": "In addition, responsive.body is a ReadableStream object that allows you to read the body block by block. The GPTpost response stream is based on this for streaming responses:",
  "68": "We can only choose one method to read the body. If we have already used the response. text() method to obtain the response, then using response. json () will not take effect because the body content has already been processed.",
  "69": "other",
  "70": "XML: Extensible Markup Language (XML) is a markup language. XML is simplified and modified from Standard Generalized Markup Language (SGML).",
  "71": "AJAX (Asynchronous JavaScript And XML) is a programming practice that uses XMLHttpRequest technology to build more complex and dynamic web pages. The implementation methods include the ancient XHR and the new Fetch.",
  "72": "HTTP module: The HTTP module refers to the HTTP module in the node, including:",
  "73": "Http.create Server serves as the web server",
  "74": "http.createClientï¼Œ Serve as a client and implement tasks such as crawling."
}